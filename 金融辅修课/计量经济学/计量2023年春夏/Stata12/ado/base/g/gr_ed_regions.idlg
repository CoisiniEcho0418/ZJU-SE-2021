/*
  gr_ed_regions.idlg

*!  VERSION 1.0.2  08apr2007

*/

SCRIPT overall_PREINIT
BEGIN
	create STRING margin
	create STRING customMargin
	create STRING customMarginDefault
	
	create STRING fill_color
	create STRING fill_rgb
	create STRING line_color
	create STRING line_rgb
	create STRING width
	create STRING pattern
	create STRING tmp
	create ARRAY tmpArray
	program overall_get_defaults
END

PROGRAM overall_get_defaults
BEGIN
	call G.withvalue index.setvalue class @.style.margin.styledex
	call index.withvalue margin.setvalue class .__STYLES.margin[@]
	call customMarginDefault.setvalue ""
	if ! margin {
		call G.withvalue margin.setvalue class @.style.margin.left
		call margin.append " "
		call G.withvalue margin.append class @.style.margin.right
		call margin.append " "
		call G.withvalue margin.append class @.style.margin.bottom
		call margin.append " "
		call G.withvalue margin.append class @.style.margin.top

		call customMarginDefault.setvalue class margin.value
		call program overall_checkCustomMargin
	}
	call overall.cb_margin.setdefault class margin.value

	call G.withvalue index.setvalue class @.style.boxstyle.shadestyle.color.styledex
	call index.withvalue fill_color.setvalue class .__STYLES.color[@]
	call overall.cb_fclr.setdefault class fill_color.value
	call G.withvalue fill_rgb.setvalue class @.style.boxstyle.shadestyle.color.rgb
	call overall.cl_fclr.setdefault class fill_rgb.value

	call G.withvalue index.setvalue class @.style.boxstyle.linestyle.color.styledex
	call index.withvalue line_color.setvalue class .__STYLES.color[@]
	call overall.cb_lclr.setdefault class line_color.value
	call G.withvalue line_rgb.setvalue class @.style.boxstyle.linestyle.color.rgb
	call overall.cl_lclr.setdefault class line_rgb.value

	call G.withvalue index.setvalue class @.style.boxstyle.linestyle.width.styledex
	call index.withvalue width.setvalue class .__STYLES.linewidth[@]
	if ! width {
		call G.withvalue width.setvalue class @.style.boxstyle.linestyle.width.val
	}
	call overall.cb_width.setdefault class width.value

	call G.withvalue index.setvalue class @.style.boxstyle.linestyle.pattern.styledex
	call index.withvalue pattern.setvalue class .__STYLES.linepattern[@]
	call overall.cb_pattern.setdefault class pattern.value
END

PROGRAM overall_initialize_controls
BEGIN
	call overall.cb_margin.setvalue class margin.value
	if fill_color {
		call overall.cb_fclr.setvalue class fill_color.value
	}
	else {
		call overall.cb_fclr.setvalue "custom"
	}
	call overall.cl_fclr.setvalue class fill_rgb.value

	if line_color {
		call overall.cb_lclr.setvalue class line_color.value
	}
	else {
		call overall.cb_lclr.setvalue "custom"
	}
	call overall.cl_lclr.setvalue class line_rgb.value

	call overall.cb_width.setvalue class width.value
	call overall.cb_pattern.setvalue class pattern.value

	if fill_rgb.isneq(line_rgb) {
		call overall.ck_outline.seton
	}
	else {
		call overall.ck_outline.setoff
	}
END

SCRIPT overall_POSTINIT
BEGIN
	program overall_initialize_controls
	program overall_checkCustomMargin
END

DIALOG overall, tabtitle("Region")
BEGIN
  GROUPBOX gb_region	_lft	_top	_iwd	_ht18,		///
	label("Overall region")
  TEXT     tx_margin	_ilft	_ss	_wd	.,		///
  	label("Margin:") right
  COMBOBOX cb_margin 	_sep	@	_cbwd	.,		///
	dropdownlist contents(_margin)				///
	onselchangelist(overall_cb_margin_sel)			///
	tooltip("Margin between plotregion and axes")
  BUTTON   bu_margin	_cbsep	@	_clwd	.,		///
	label("..") tooltip("Custom margin (not defined)")	///
	onpush(script overall_showMarginDialog)

  TEXT     tx_fclr	_ilft	_mls	_wd	.,		///
	label("Color:") right
  COMBOBOX cb_fclr	_sep	@	_cbwd	.,		///
	dropdownlist contents(_colors) 				///
	onselchangelist(overall_cl_fclr_sel)
  COLOR    cl_fclr	_cbsep	@	_clwd	.,
  
  TEXT     tx_width	_ilft	 _mls	_wd	.,		///
	label("Outline width:") right
  COMBOBOX cb_width	_sep	@	_cbwd	.,		///
	dropdown 						///
	contents(_linewidths)

  TEXT     tx_pattern	_ilft	_mls	_wd	.,		///
	label("Outline pattern:") right
  COMBOBOX cb_pattern	_sep	@	_cbwd	.,		///
	dropdownlist						///
	contents(_linepatterns)

  CHECKBOX ck_outline	_ilft	_ls	_ibwd	_ht3h,		///
	groupbox						///
	label("Different outline color")			///
	onclickon(script overall_outline_on)			///
	onclickoff(script overall_outline_off) nomemory

  TEXT     tx_lclr	_iilft	_ms	_wd2	.,		///
	label("Outline color:") right
  COMBOBOX cb_lclr	_sep2	@	_cbwd	.,		///
	dropdownlist contents(_colors) 				///
	onselchangelist(overall_cl_lclr_sel)
  COLOR    cl_lclr	_cbsep	@	_clwd	.,
END

LIST overall_cb_margin_sel
BEGIN
	overall.bu_margin.show
	overall.bu_margin.hide
END

SCRIPT overall_showMarginDialog
BEGIN
	create STRING MSG  // used by child dialog
	MSG.setvalue class customMargin.value
	create CHILD gr_margin_create AS regionMargin
	regionMargin.setExitString customMargin
	regionMargin.setExitAction "program overall_checkCustomMargin"
END
PROGRAM overall_checkCustomMargin
BEGIN
	if customMargin {
		call customMargin.tokenize tmpArray
		call tmp.setvalue "Custom margin "
		call tmp.append "(Left:"
		call tmp.append class tmpArray[1]
		call tmp.append " Right:"
		call tmp.append class tmpArray[2]
		call tmp.append " Bottom:"
		call tmp.append class tmpArray[3]
		call tmp.append " Top:"
		call tmp.append class tmpArray[4]
		call tmp.append ")"
		call tmp.withvalue overall.bu_margin.settooltip "@"
	}
	else {
		call overall.bu_margin.settooltip "Custom margin (not defined)"
	}
END

SCRIPT overall_outline_on
BEGIN
	overall.tx_lclr.enable
	overall.cb_lclr.enable
END

SCRIPT overall_outline_off
BEGIN
	overall.tx_lclr.disable
	overall.cb_lclr.disable
END

LIST overall_cl_fclr_sel
BEGIN
	overall.cl_fclr.show
	overall.cl_fclr.hide
END
LIST overall_cl_lclr_sel
BEGIN
	overall.cl_lclr.show
	overall.cl_lclr.hide
END

PROGRAM overall_output
BEGIN
	call program overall_get_defaults
	if overall.cb_margin.iseq("custom") {
		if customMargin & customMargin.isneq(customMarginDefault) {
			put "style(margin("
			put customMargin
			put ")) "
		}
	}
	else {
		if ! overall.cb_margin.isdefault() {
			put " style(margin(" overall.cb_margin ")) "
		}
	}

	if ! overall.cl_fclr.isvisible() & ! overall.cb_fclr.isdefault() {
		put "style(boxstyle(shadestyle(color(" 
		put overall.cb_fclr 
		put ")))) "
	}
	if overall.cl_fclr.isvisible() & ! overall.cl_fclr.isdefault() {
		put "style(boxstyle(shadestyle(color("  `"""'
		put overall.cl_fclr
		put `"""'
		put ")))) "
	}
	if ! overall.ck_outline & overall.cb_fclr.isneq(line_color) {
		if ! overall.cl_fclr.isvisible() {
			put "style(boxstyle(linestyle(color(" 
			put overall.cb_fclr 
			put ")))) "
		}
		if overall.cl_fclr.isvisible() & overall.cl_fclr.isneq(line_rgb) {
			put "style(boxstyle(linestyle(color("  `"""'
			put overall.cl_fclr
			put `"""'
			put ")))) "
		}
	}
	if overall.cb_lclr & overall.ck_outline {
		if ! overall.cl_lclr.isvisible() & ! overall.cb_lclr.isdefault() {
			put "style(boxstyle(linestyle(color(" 
			put overall.cb_lclr 
			put ")))) "
		}
		if overall.cl_lclr.isvisible() & ! overall.cl_lclr.isdefault() {
			put "style(boxstyle(linestyle(color("  `"""'
			put overall.cl_lclr
			put `"""'
			put ")))) "
		}
	}

	if ! overall.cb_width.isdefault() {
		put "style(boxstyle(linestyle(width("
		put overall.cb_width
		put ")))) "
	}
	if ! overall.cb_pattern.isdefault() {
		put "style(boxstyle(linestyle(pattern("
		put overall.cb_pattern
		put ")))) "
	}
END


SCRIPT inner_PREINIT
BEGIN
	create STRING inner_fill_color
	create STRING inner_fill_rgb
	create STRING inner_line_color
	create STRING inner_line_rgb
	create STRING inner_width
	create STRING inner_pattern
	program inner_get_defaults
END

PROGRAM inner_get_defaults
BEGIN
	call G.withvalue index.setvalue class @.style.inner_boxstyle.shadestyle.color.styledex
	call index.withvalue inner_fill_color.setvalue class .__STYLES.color[@]
	call inner.cb_fclr.setdefault class inner_fill_color.value
	call G.withvalue inner_fill_rgb.setvalue class @.style.inner_boxstyle.shadestyle.color.rgb
	call inner.cl_fclr.setdefault class inner_fill_rgb.value

	call G.withvalue index.setvalue class @.style.inner_boxstyle.linestyle.color.styledex
	call index.withvalue inner_line_color.setvalue class .__STYLES.color[@]
	call inner.cb_lclr.setdefault class inner_line_color.value
	call G.withvalue inner_line_rgb.setvalue class @.style.inner_boxstyle.linestyle.color.rgb
	call inner.cl_lclr.setdefault class inner_line_rgb.value

	call G.withvalue index.setvalue class @.style.inner_boxstyle.linestyle.width.styledex
	call index.withvalue inner_width.setvalue class .__STYLES.linewidth[@]
	if ! inner_width {
		call G.withvalue inner_width.setvalue class @.style.inner_boxstyle.linestyle.width.val
	}
	call inner.cb_width.setdefault class inner_width.value

	call G.withvalue index.setvalue class @.style.inner_boxstyle.linestyle.pattern.styledex
	call index.withvalue inner_pattern.setvalue class .__STYLES.linepattern[@]
	call inner.cb_pattern.setdefault class inner_pattern.value

END

PROGRAM inner_initialize_controls
BEGIN
	if inner_fill_color {
		call inner.cb_fclr.setvalue class inner_fill_color.value
	}
	else {
		call inner.cb_fclr.setvalue "custom"
	}

	if inner_line_color {
		call inner.cb_lclr.setvalue class inner_line_color.value
	}
	else {
		call inner.cb_lclr.setvalue "custom"
	}
	call inner.cl_lclr.setvalue class inner_line_rgb.value

	call inner.cb_width.setvalue class inner_width.value
	call inner.cb_pattern.setvalue class inner_pattern.value

	if inner_fill_rgb.isneq(inner_line_rgb) {
		call inner.ck_outline.seton
	}
	else {
		call inner.ck_outline.setoff
	}
END

SCRIPT inner_POSTINIT
BEGIN
	program inner_initialize_controls
END

DIALOG inner, tabtitle("Inner region")
BEGIN
  GROUPBOX gb_region	_lft	_top	_iwd	_ht15,		///
	label("Inner region")
  TEXT     tx_fclr	_ilft	_ss	_wd	.,		///
	label("Color:") right
  COMBOBOX cb_fclr	_sep	@	_cbwd	.,		///
	dropdownlist contents(_colors) 				///
	onselchangelist(inner_cl_fclr_sel)
  COLOR    cl_fclr	_cbsep	@	_clwd	.,
  
  TEXT     tx_width	_ilft	 _mls	_wd	.,		///
	label("Outline width:") right
  COMBOBOX cb_width	_sep	@	_cbwd	.,		///
	dropdown 						///
	contents(_linewidths)

  TEXT     tx_pattern	_ilft	_mls	_wd	.,		///
	label("Outline pattern:") right
  COMBOBOX cb_pattern	_sep	@	_cbwd	.,		///
	dropdownlist						///
	contents(_linepatterns)

  CHECKBOX ck_outline	_ilft	_ls	_ibwd	_ht3h,		///
	groupbox						///
	label("Different outline color")			///
	onclickon(script inner_outline_on)			///
	onclickoff(script inner_outline_off) nomemory

  TEXT     tx_lclr	_iilft	_ms	_wd2	.,		///
	label("Outline color:") right
  COMBOBOX cb_lclr	_sep2	@	_cbwd	.,		///
	dropdownlist contents(_colors) 				///
	onselchangelist(inner_cl_lclr_sel)
  COLOR    cl_lclr	_cbsep	@	_clwd	.,
END

SCRIPT inner_outline_on
BEGIN
	inner.tx_lclr.enable
	inner.cb_lclr.enable
END

SCRIPT inner_outline_off
BEGIN
	inner.tx_lclr.disable
	inner.cb_lclr.disable
END
/*
  gr_ed_regions.idlg

*!  VERSION 1.0.0  08dec2006

*/

LIST inner_cl_fclr_sel
BEGIN
	inner.cl_fclr.show
	inner.cl_fclr.hide
END
LIST inner_cl_lclr_sel
BEGIN
	inner.cl_lclr.show
	inner.cl_lclr.hide
END

PROGRAM inner_output
BEGIN
	call program inner_get_defaults
	if ! inner.cl_fclr.isvisible() & ! inner.cb_fclr.isdefault() {
		put "style(inner_boxstyle(shadestyle(color(" 
		put inner.cb_fclr 
		put ")))) "
	}
	if inner.cl_fclr.isvisible() & ! inner.cl_fclr.isdefault() {
		put "style(inner_boxstyle(shadestyle(color("  `"""'
		put inner.cl_fclr
		put `"""'
		put ")))) "
	}
	if ! inner.ck_outline & inner.cb_fclr.isneq(inner_line_color) {
		if ! inner.cl_fclr.isvisible() {
			put "style(inner_boxstyle(linestyle(color(" 
			put inner.cb_fclr 
			put ")))) "
		}
		if inner.cl_fclr.isvisible() & inner.cl_fclr.isneq(inner_line_rgb) {
			put "style(inner_boxstyle(linestyle(color("  `"""'
			put inner.cl_fclr
			put `"""'
			put ")))) "
		}
	}
	if inner.cb_lclr & inner.ck_outline {
		if ! inner.cl_lclr.isvisible() & ! inner.cb_lclr.isdefault() {
			put "style(inner_boxstyle(linestyle(color(" 
			put inner.cb_lclr 
			put ")))) "
		}
		if inner.cl_lclr.isvisible() & ! inner.cl_lclr.isdefault() {
			put "style(inner_boxstyle(linestyle(color("  `"""'
			put inner.cl_lclr
			put `"""'
			put ")))) "
		}
	}

	if ! inner.cb_width.isdefault() {
		put "style(inner_boxstyle(linestyle(width("
		put inner.cb_width
		put ")))) "
	}
	if ! inner.cb_pattern.isdefault() {
		put "style(inner_boxstyle(linestyle(pattern("
		put inner.cb_pattern
		put ")))) "
	}
END

PROGRAM region_output
BEGIN
	put " " /program overall_output
	put " " /program inner_output
END
